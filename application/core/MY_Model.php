<?php/* * To change this template, choose Tools | Templates * and open the template in the editor. */class MY_Model extends CI_Model {    protected $table;    protected $tables;    protected $user_id;    protected $user_email;    protected $field_id;    public $a_pager ;        private $pager_segment;//set,get        function __construct() {        parent::__construct();        self::initialize();        $this->load->library('pagination');    }        public function initialize($config = array()) {//need edit//                $this->pager_segment = 4;                $defaults = array(//                    'table' => '',//                    'tables' => array(),                    'user_id'    => $this->session->userdata('user_email'),                    'user_email' => $this->session->userdata('user_email'),//                    'field_id'      => 'id',//                    'pager_segment' =>4,                    'a_pager'    => array(                        'offset'         => $this->uri->segment($this->uri->total_segments()), //default segment                        'offset'         => '',                        'limit'          => 5,                        'base_url'       => base_url() . $this->get_uri_except_pager($this->uri->total_segments()),                        'base_url'       => '',                        'per_page'       => 5,//                                'uri_segment' => $this->pager_segment,                        'uri_segment'    => 4,//                                'num_links' => 6,                        'total_rows'     => null,                        'cur_tag_open'   => '<strong id="current_page_product" class="current-page">',                        'cur_tag_close'  => '</strong>',                        //            'num_tag_open' => '<li class="page">',                        //            'num_tag_close' => '</li>',//                                'use_page_numbers' => true,                        'next_link'      => '»',                        'prev_link'      => '«',                        //            'prev_tag_open' => '<li>',                        //            'prev_tag_close' => '</li>',                        //            'first_tag_open' => '<li>',                        //            'first_tag_close' => '</li>',                        //            'last_tag_open' => '<li>',                        //            'last_tag_close' => '</li>',                        //            'last_link' => 'Last',                        //            'first_link' => 'First',                        //            'next_tag_open' => '<li>',                        //            'next_tag_close' => '</li>',                        //            'previous_tag_open' => '<li>',                        //            'previous_tag_close' => '</li>'                        'first_link'     => '&laquo,',                        'last_link'      => '&raquo,',                        'full_tag_open'  => '<p class="pagination" id="ajax_pagination">',                        'full_tag_close' => '</p>',                        'cur_page'       => 0,                    ),                );                $a_merge = array_replace_recursive($defaults, $config);                foreach ($a_merge as $key => $val) {                        if (isset($this->$key) && is_array($this->$key)) {                                $this->$key = array_replace_recursive($this->$key, $val);                        }                        else {                                $this->$key = $val;                        }                }        }                public function load_all_db_columns_name($table=''){                $table = $table==''?$this->table:$table;                $fields = $this->db->list_fields($table);                foreach ($fields as $field){                        if(!isset($this->$field)){                                $this->$field = NULL;                        }                }        }        public function get_uri_except_pager($segment){                $array_segment = $this->uri->segment_array();                unset($array_segment[$segment]);                $uri     = implode('/',$array_segment) ;                return $uri;        }                public function set_pager_segment($segment) {                $this->pager_segment = $segment;                $this->a_pager['offset'] =  $this->uri->segment($segment);                $this->a_pager['uri_segment'] =  $segment;                $this->a_pager['base_url'] =  base_url().  $this->get_uri_except_pager($segment);        }                public function __set($name, $value) {                switch ($name) {                        case 'pager_segment':                                                                $this->set_pager_segment($value);                                break;                        default :                                $this->$name = $value;                                break;                }        }        //        public function &__get($key)//        {   //            if(isset($this->a_property[$key])){    //                return $this->a_property[$key];//            }//        }                 public function create_links(){                $this->pagination->initialize($this->a_pager);                return $this->pagination->create_links();        }                /*public function get_pager($sbase_url = '', $iuri_segment = 5) {        if (empty($sbase_url)) {            show_error('Base url is empty.');            return false;        }        // set params for paging        $this->load->helper('form');        $this->load->library('pagination');        $this->$a_config_pager['base_url'] = site_url($sbase_url);        $this->$a_config_pager['uri_segment'] = $iuri_segment;        $this->$a_config_pager['total_rows'] = $this->_itotal_rows;        $inum_ele_page = $this->session->userdata($this->config->item('ele_per_page'));        $inum_ele_page = !empty($inum_ele_page) ? $inum_ele_page : $this->config->item('per_page_admin');        $this->$a_config_pager['per_page'] = $inum_ele_page;        $this->pagination->initialize($this->$a_config_pager);        return $this->pagination->create_links();    }    public function set_pager(array $pager = null) {        if (empty($pager)) {            return false;        }        return $this->$a_config_pager = array_merge($this->$a_config_pager, $pager);    }*/        /*function insert($table,$data){        return $this->db->insert($table,$data);    }*/    function insert($data){        return $this->db->insert($this->table,$data);    }        /*function update($table,$data, $condition = array()){        if (!empty($condition) && is_array($condition))            foreach ($condition as $key => $value)                if (is_numeric($key))                    $this->db->where($value);                else                    $this->db->where($key, $value);        $this->db->update($table, $data);    }*/    function update($data, $condition = array()){        if (!empty($condition) && is_array($condition))            foreach ($condition as $key => $value)                if (is_numeric($key))                    $this->db->where($value);                else                    $this->db->where($key, $value);        $this->db->update($this->table, $data);    }    /*function delete($table,$condition = array()){         if (!empty($condition) && is_array($condition))            foreach ($condition as $key => $value)                if (is_numeric($key))                    $this->db->where($value);                else                    $this->db->where($key, $value);        $this->db->delete($table);    }*/    //Danh edit    function delete($condition = array()){         if (!empty($condition) && is_array($condition))            foreach ($condition as $key => $value)                if (is_numeric($key))                    $this->db->where($value);                else                    $this->db->where($key, $value);        $this->db->delete($this->table);    }//end Danh edited code            /*function getAll($table){        $query = $this->db->get($table);        return $query->result();    }//*/        /*function getInfoByID($table,$array_where){        $this->db->where($array_where);        $query =  $this->db->get($table);        return $query->result();    }*/        function getInfoByID($select,$table, $array_where, $arry_join = array()) {        $this->db->where($array_where);        $this->db->select($select);        $this->db->from($table);        foreach ($arry_join as $key => $value)            $this->db->join($key, $value);        $query = $this->db->get();        return $query->row();    }             function getinfoUser($table,$field_get,$fields_where,$field_return) {        $this->db->where($fields_where, $field_get);        $query = $this->db->get(DBPREFIX.$table);        if ($query->num_rows() > 0) {            $rows = $query->row();            return $rows->$field_return;        }        return '';    }        //Danh code    function getOneRow($array_where){                $this->db->where($array_where);                                $query =  $this->db->get($this->table);                                if($query->num_rows()>0){                        return $query->row();                }                return NULL;    }        function getRows($array_where){        $this->db->where($array_where);        $query =  $this->db->get($this->table);        return $query->result();    }        function getAll(){        $query = $this->db->get($this->table);        return $query->result();    }        function getAllByID($id){            $a_where = array($this->field_id => $id);            return $this->getOneRow($a_where);                }     //    abstract protected function deleteRow($array_where);//        public function get_list($a_options = array()){//                //        }               public function get_total_count(){                return $this->get_list(array('get_total_count' => true));        }}?>